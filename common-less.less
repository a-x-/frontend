/**
 * @file DS-PROMO /
 * Created: 14.05.14 / 19:29
 */

@golden-ratio: 0.618;

//
// Don't move to common-css
// Yes, it produces css here, but it switch up .hn alias for headers!
h1, h2, h3 { .hn; }

//
// @deprecated
.flex-comb(@val:0 1 auto) {
  -webkit-flex: @val;
  flex: @val;
}

//
// flex
// Применяется к: дочернему элементу / flex-элементу.
// Это сокращение для flex-grow, flex-shrink и flex-basis.
// Второй и третий параметры (flex-shrink, flex-basis) необязательны.
// Значение по умолчанию — 0 1 auto.
// flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
.flex(@grow:0, @shrink: 1, @basis: auto) {
  -webkit-flex: @grow @shrink @basis;
  flex: @grow @shrink @basis;
}

//
// justify-content: flex-start | flex-end | center | space-between | space-around
// flex-start | flex-end | center | baseline | stretch | [initial | inherit | unset]
.justify-content(@horisontal:space-between, @vertical: flex-start) {
  -webkit-justify-content: @horisontal;
  justify-content: @horisontal;
  align-items: @vertical;
  -webkit-align-items: @vertical;
}

//
// @deprecated
.flex-flow-comb (@val: row nowrap) {
  -webkit-flex-flow: @val;
  flex-flow: @val;
}

//
// Применяется к: родительскому элементу flex-контейнера.
// Это сокращение для свойств flex-direction и flex-wrap, вместе определяющих главную и поперечную оси.
// По умолчанию принимает значение row nowrap.
// flex-flow: <'flex-direction'> || <'flex-wrap'>
.flex-flow (@dir: row, @wrap: nowrap) {
  -webkit-flex-flow: @dir @wrap;
  flex-flow: @dir @wrap;
}

.display-flex(@val:auto) {
  display: box;
  display: -webkit-flex;
  display: flex;
}

.align-self(@val) {
  align-self: @val;
}

// Workaround Safari bug
// [CSS Calc Viewport Units Workaround?](http://stackoverflow.com/questions/21224411/css-calc-viewport-units-workaround)
.calc-width-subtraction (@v1, @v2) {
  width: @v1;
  margin-right: -@v2;
  padding-right: @v2;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

/**
 * @deprecated
 */
.animation(@val) {
  -webkit-animation: @val;
  animation: @val;
}

/**
 * @deprecated
 */
.animation2(@val1,@val2) {
  -webkit-animation: @val1, @val2;
  animation: @val1 @val2;
}

/**
 *
 * @param animation-name            --  Specifies the name of the @keyframes at-rule describing the animation's keyframes.
 * @param animation-duration        --  Configures the length of time that an animation should take to complete one cycle.
 * @param animation-timing-function     linear|ease|ease-in|ease-out|cubic-bezier(n,n,n,n)
 *                                  --  Configures the timing of the animation; that is, how the animation transitions through keyframes, by establishing acceleration curves.
 * @param animation-delay           --  Configures the delay between the time the element is loaded and the beginning of the animation sequence.
 * @param animation-iteration-count --  Configures the number of times the animation should repeat; you can specify infinite to repeat the animation indefinitely.
 * @param animation-direction           normal|reverse|alternate|alternate-reverse
 *                                  --  Configures whether or not the animation should alternate direction on each run through the sequence or reset to the start point and repeat itself.
 *                                      Example http://www.w3schools.com/cssref/playit.asp?filename=playcss_animation-direction&preval=alternate
 * @param animation-play-state          paused|running
 *                                  --  Lets you pause and resume the animation sequence.
 *                                      Example: http://www.w3schools.com/cssref/playit.asp?filename=playcss_animation-play-state&preval=paused
 *
 * @param animation-fill-mode -- Configures what values are applied by the animation before and after it is executing.
 */
.animation3(
  @keyframes-name,
  @duration: 1s,
  @delay: 0,
  @iteration-count: 1,
  @timing-function: ease-in-out,
  @direction: normal,
  @play-state: running
) {
  -webkit-animation: @keyframes-name @duration @timing-function @delay @iteration-count @direction @play-state;
  animation: @keyframes-name @duration @timing-function @delay @iteration-count @direction @play-state;
}

/**
 * @version 2 Note: old usages are wrong now
 */
.transition(@property:all,@duration:1s,@function:ease-in-out) {
  -webkit-transition: @property @duration @function;
  -moz-transition: @property @duration @function;
  -ms-transition: @property @duration @function;
  -o-transition: @property @duration @function;
  transition: @property @duration @function;
}

.transform(@val, @point: center) {
  -webkit-transform: @val;
  -moz-transform: @val;
  -ms-transform: @val;
  -o-transform: @val;
  transform: @val;
  -webkit-transform-origin: @point;
  transform-origin: @point;
}

//
// Greatful trick
// make block as a img by sizing behaviour (width = height)
// http://www.mademyday.de/css-height-equals-width-with-pure-css.html
// (@ratio-x : @ratio-y) (1,1) -> 1:1; (1,2) -> 1:2; (16,9) -> 16:9; ...
.ratio(@ratio-x: 1,@ratio-y: 1) {
  position: relative;
  overflow: hidden;
  //  width: 50%; /* desired width */
  &:before {
    content: "";
    display: block;
    padding-top: 100% / (@ratio-x / @ratio-y);
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
  }
}

.appearance(@val) {
  -webkit-appearance: @val;
  -moz-apperance: @val;
  appearance: @val;
}

.text-outline (@color, @x: 1px) {
  text-shadow: @x 0 0 @color, 0 @x 0 @color, -@x 0 0 @color, 0 -@x 0 @color;
}

.a-clear() {
  text-decoration: inherit;
  color: inherit;
  border: none;
}

.a-prevent-default() {
  .a-clear;
  &:hover {
    .a-clear;
  }
}

.filter (@val) {
  -webkit-filter: @val;
  filter: @val;
}

.hn {
  color: #555;
  margin: 1em 0 0 0;
}

.ul-prevent-default() {
  list-style: none;
  padding: 0;
  margin: 0;
  width: 100%;
  display: block;
  & > li {
    padding: 0;
    margin: 0;
    display: block;
  }
}

.ul-nav(@height: 8hv,@height-min: 20px) {
  .ul-prevent-default;
  .display-flex;
  & > li {
    .flex(1);
    height: @height;
    line-height: @height;
    min-height: @height-min;
    text-align: center;
    display: inline-block;
  }
}

.h-center() {
  margin-left: auto;
  margin-right: auto;
}

/**
 * Sidebars
 */
.bar-wrapper() {
  .display-flex;
  & > * {
    flex-shrink: 1;
    flex-grow: 1;
  }
  & > *:not(.no-bar) {
    flex-basis: 33%;
  }
  .no-bar(@width-center: 800px) {
    //    width: @width-center !important;
    flex-basis: @width-center; // !important;
    flex-grow: 0 !important;
    flex-shrink: 0 !important;
  }
  & > .block {
    margin: 6vh 0;
  }
  &:first-child {
    margin: 0;
  }
}

/**
 * Slider
 */
.slider(@width: 800px, @height: 20vh) {
  display: block;
  height: @height;
  min-height: 180px;
  background: url("//subtlepatterns.com/patterns/graphy.png");
  ul {
    .ul-prevent-default;
    & > li {
      background-position: center !important;
      background-size: cover;
      background-repeat: no-repeat;
      & > a {
        display: block;
        width: @width;
        height: @height;
      }
    }
  }
  .nav-arrow {
    width: 10%;
    position: absolute;
    height: @height;
    margin-top: -@height;
    font-size: 100px;
    line-height: @height;
    text-align: center;
    opacity: 0;
    color: gray;
    .transition(opacity);
    &:hover {
      opacity: .3;
    }
    &.left {
      left: 0;
    }
    &.right {
      right: 0;
    }
  }
  .nav-hub {
    position: absolute;
    bottom: 10px;
  }
  .nav-item {
    @size: 12px;
    width: @size;
    height: @size;
    border-radius: 50%;
    border: 2px solid rgba(255, 255, 255, 0.3);
    display: inline-block;
    margin: 0 @size / 4;
    &.current {
      background: white;
    }
    &:hover {
      border-color: white;
    }
  }
}

.border-radius-top(@left:6px,@right:6px) {
  -webkit-border-top-left-radius: @left;
  -webkit-border-top-right-radius: @right;
  -moz-border-radius-topleft: @left;
  -moz-border-radius-topright: @right;
  border-radius: @left @right 0 0;
}

.box-sizing(@val:border-box) {
  -moz-box-sizing: @val;
  box-sizing: @val;
}

// @deprecated fonts set
@font-family-heading: "MyriadPro-Light", "LucidaSans-Unicode", sans-serif;
@font-family: "LucidaSans-Unicode", sans-serif;

//.elegant-slim { // body option class
// body option class
// actual font set
@little-font: "LucidaSans-Unicode", "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, Verdana, sans-serif;
@middle-font: "MyriadPro-Regular", "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, Verdana, sans-serif;
@huge-font: "MyriadPro-Light", "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, Verdana, sans-serif;
//}

@hr-margin: 10px;

// @link http://a-x-.github.io/flex-fit-the-flex.html
.container-for-fit-child() {
  position: relative; // change absolute positioned children offset point
  > * {
    //
    // Fit the parent
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }
}

.inter-indentation(@size: .5em) {
  margin-right: @size;
  &:last-child { margin-right: 0; }
}

.random-color() {
  @randomColor: `Math.floor(Math.random()*16777215).toString(16)`;
  @colorHex: e(@randomColor);
  @color: ~"#@{colorHex}";
}

.css-collapse-margin-prevent() {
  &:before {
    content: ' ';
    display: table;
  }
  &:after {
    content: ' ';
    display: table;
  }
}